### Un environnement pour lancer les tests
### Les conteneurs se lancent comme la prod

services:
  #### FEDOW ####
  fedow_memcached:
    image: memcached:1.6
    container_name: fedow_memcached
    hostname: fedow_memcached
    restart: always
    networks:
      - backend

  fedow_django:
    image: tibillet/fedow:nightly
    container_name: fedow_django
    hostname: fedow_django
    restart: always
    env_file: ./fedow/env
    user: fedow
    volumes:
      - ./fedow/www:/home/fedow/Fedow/www # collect static for nginx
      - ./fedow/logs:/home/fedow/Fedow/logs
    links:
      - fedow_memcached:memcached
    networks:
      - backend
    command: 'bash start.sh'

  fedow_nginx:
    image: nginx
    restart: always
    container_name: fedow_nginx
    hostname: fedow_nginx
    volumes:
      - ./fedow/www:/www # collected static from django
      - ./fedow/logs:/logs
      - ./fedow_nginx:/etc/nginx/conf.d
    depends_on:
      - fedow_django
    links:
      - fedow_django:fedow_django
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend
      - traefik.http.routers.fedow_nginx.tls.certresolver=myresolver
      - traefik.http.routers.fedow_nginx.rule=Host(`fedow.$DOMAIN`)
      - traefik.http.services.fedow_nginx.loadbalancer.server.port=80
    networks:
      - frontend
      - backend

  #### LESPASS ####
  lespass_postgres:
    image: postgres:13-bookworm
    restart: always
    container_name: lespass_postgres
    hostname: lespass_postgres
    env_file: ./lespass/env
    networks:
      - backend

  lespass_memcached:
    image : memcached:1.6
    container_name: lespass_memcached
    hostname: lespass_memcached
    restart: always
    networks:
      - backend

  lespass_redis:
    container_name: lespass_redis
    hostname: lespass_redis
    image: redis:7
    restart: always
    networks:
      - backend

  lespass_django:
    image: tibillet/lespass:nightly
    restart: always
    container_name: lespass_django
    hostname: lespass_django
    env_file: ./lespass/env
    volumes:
      - ./lespass/www:/DjangoFiles/www
      - ./lespass/logs:/DjangoFiles/logs
    depends_on:
      - lespass_postgres
      - lespass_redis
      - lespass_memcached
    links:
      - lespass_postgres:postgres
      - lespass_redis:redis
      - lespass_memcached:memcached
    networks:
      - backend
    command: 'bash start.sh'

  lespass_celery:
    image: tibillet/lespass:nightly
    container_name: lespass_celery
    restart: always
    hostname: lespass_celery
    env_file: ./lespass/env
    volumes:
      - ./lespass/logs:/DjangoFiles/logs
    depends_on:
      - lespass_postgres
      - lespass_redis
      - lespass_memcached
    links:
      - lespass_postgres:postgres
      - lespass_redis:redis
      - lespass_memcached:memcached
    networks:
      - backend
    command: "poetry run celery -A TiBillet worker -l INFO -B"

  lespass_nginx:
    image: nginx:latest
    container_name: lespass_nginx
    restart: always
    hostname: lespass_nginx
    links:
      - lespass_django:lespass_django
    volumes:
      - ./lespass/www:/www
      - ./lespass/logs:/logs
      - ./lespass/nginx:/etc/nginx/conf.d
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend
      - traefik.http.routers.lespass_nginx.tls.certresolver=myresolver
      - traefik.http.routers.lespass_nginx.rule=Host(`$DOMAIN`) || Host(`www.$DOMAIN`) || Host(`lespass.$DOMAIN`) || Host(`chantefrein.$DOMAIN`) || Host(`agenda.$DOMAIN`)
      - traefik.http.services.lespass_nginx.loadbalancer.server.port=80
    networks:
      - frontend

#### CASHLESS 1 ####
  laboutik_postgres:
    image: postgres:11
    restart: always
    env_file: ./laboutik/env
    container_name: laboutik_postgres
    hostname: laboutik_postgres
    networks:
      - backend

  laboutik_memcached:
    image: memcached:1.6
    container_name: laboutik_memcached
    hostname: laboutik_memcached
    restart: always
    networks:
      - backend

  laboutik_redis:
    image: redis:6-alpine
    restart: always
    container_name: laboutik_redis
    hostname: laboutik_redis
    networks:
      - backend

  laboutik_django:
    image: tibillet/laboutik:nightly
    restart: always
    env_file: ./laboutik/env
    container_name: laboutik_django
    hostname: laboutik_django
    volumes:
      - ./www:/DjangoFiles/www
      - ./logs:/DjangoFiles/logs
    links:
      - laboutik_postgres:postgres
      - laboutik_redis:redis
      - laboutik_memcached:memcached
    depends_on:
      - laboutik_postgres
      - laboutik_redis
      - laboutik_memcached
    networks:
      - backend
    command: "bash start_services.sh"

  laboutik_nginx:
    image: nginx
    restart: always
    container_name: laboutik_nginx
    hostname: laboutik_nginx
    depends_on:
      - laboutik_django
    links:
      - laboutik_django:laboutik_django
    volumes:
      - ./www:/DjangoFiles/www
      - ./logs:/DjangoFiles/logs
      - ./laboutik/nginx:/etc/nginx/conf.d
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend
      - traefik.http.routers.laboutik_nginx.tls.certresolver=myresolver
      - traefik.http.routers.laboutik_nginx.rule=Host(`laboutik.${DOMAIN}`)

    networks:
      - frontend
      - backend

networks:
  frontend:
    external: true
  backend:
